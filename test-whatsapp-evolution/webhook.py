from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
from typing import Optional, Dict, Any, List
import httpx
from datetime import datetime
import json
import os
from dotenv import load_dotenv
from openai import OpenAI
import sys
import pathlib

# Agregar el directorio padre al path para importar m√≥dulos
parent_dir = pathlib.Path(__file__).parent.parent
sys.path.insert(0, str(parent_dir))

from function_manager import FunctionManager
from functions import tools
import locale

load_dotenv()

# Configurar la ruta de la base de datos al directorio ra√≠z
DB_PATH = str(parent_dir / "database.db")
print(f"üìä Usando base de datos: {DB_PATH}")

app = FastAPI()

# Configuraci√≥n de EvolutionAPI
EVOLUTION_API_URL = "https://evolution-api-production-827b.up.railway.app"
EVOLUTION_API_KEY = "8BF194C1A4C39A38A4EF7DEB99B49"
INSTANCE_NAME = "opti"

# Configuraci√≥n de OpenAI
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
function_manager = FunctionManager()

# Configurar locale en espa√±ol
try:
    locale.setlocale(locale.LC_TIME, 'es_CO.UTF-8')
except locale.Error:
    try:
        locale.setlocale(locale.LC_TIME, 'es_ES.UTF-8')
    except locale.Error:
        try:
            locale.setlocale(locale.LC_TIME, 'Spanish_Colombia.1252')
        except locale.Error:
            print("‚ö†Ô∏è Warning: Spanish locale not available, using default locale")
            pass

# Extraer autom√°ticamente las funciones de database desde functions.py
# Estas son las funciones que se importan de database.py en functions.py
import database
DATABASE_FUNCTIONS = set()

# Obtener todas las funciones de database que est√°n en available_functions
from functions import available_functions
for func_name, func in available_functions.items():
    # Verificar si la funci√≥n viene del m√≥dulo database
    if hasattr(database, func_name):
        DATABASE_FUNCTIONS.add(func_name)

print(f"üîß Funciones de database detectadas: {sorted(DATABASE_FUNCTIONS)}")

async def execute_function_with_db_path(function_name: str, arguments: str):
    """
    Wrapper que ejecuta funciones inyectando db_path cuando sea necesario
    Solo aplica a funciones que vienen del m√≥dulo database.py
    """
    # Parse argumentos
    kwargs = json.loads(arguments) if arguments else {}
    
    # Si es una funci√≥n de database, agregar db_path
    if function_name in DATABASE_FUNCTIONS:
        kwargs['db_path'] = DB_PATH
        print(f"   üíæ Agregando db_path a {function_name}")
    
    # Ejecutar usando el function manager
    result = await function_manager.execute_function(function_name, json.dumps(kwargs))
    return result

class WebhookPayload(BaseModel):
    event: str
    instance: str
    data: Dict[str, Any]
    destination: Optional[str] = None
    date_time: Optional[str] = None
    sender: Optional[str] = None
    server_url: Optional[str] = None
    apikey: Optional[str] = None

async def get_last_messages(remote_jid: str, limit: int = 5) -> List[Dict]:
    """
    Obtiene los √∫ltimos N mensajes de un chat espec√≠fico
    """
    url = f"{EVOLUTION_API_URL}/chat/findMessages/{INSTANCE_NAME}"
    
    headers = {
        "Content-Type": "application/json",
        "apikey": EVOLUTION_API_KEY
    }
    
    payload = {
        "where": {
            "key": {
                "remoteJid": remote_jid
            }
        },
        "offset": limit
    }
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(url, json=payload, headers=headers)
            response.raise_for_status()
            data = response.json()
            
            # La estructura es: data.messages.records
            if isinstance(data, dict):
                messages_data = data.get("messages", {})
                if isinstance(messages_data, dict):
                    records = messages_data.get("records", [])
                    
                    print(f"‚úì Se obtuvieron {len(records)} mensajes")
                    print(f"   Total en DB: {messages_data.get('total', 0)}")
                    print(f"   P√°gina actual: {messages_data.get('currentPage', 1)}/{messages_data.get('pages', 1)}")
                    
                    return records
            
            print("‚ö†Ô∏è Estructura de respuesta inesperada")
            return []
            
    except Exception as e:
        print(f"Error obteniendo mensajes: {e}")
        import traceback
        traceback.print_exc()
        return []

# Store local como backup
class MessageStore:
    """Almacena mensajes en memoria para crear historial"""
    def __init__(self, max_messages_per_chat: int = 50):
        self.messages: Dict[str, List[Dict]] = {}
        self.max_messages = max_messages_per_chat
    
    def add_message(self, remote_jid: str, message_data: Dict):
        if remote_jid not in self.messages:
            self.messages[remote_jid] = []
        
        self.messages[remote_jid].append(message_data)
        
        # Mantener solo los √∫ltimos N mensajes
        if len(self.messages[remote_jid]) > self.max_messages:
            self.messages[remote_jid] = self.messages[remote_jid][-self.max_messages:]
    
    def get_messages(self, remote_jid: str, limit: int = 5) -> List[Dict]:
        messages = self.messages.get(remote_jid, [])
        return messages[-limit:] if messages else []

message_store = MessageStore(max_messages_per_chat=50)

def get_text_assistant_prompt() -> str:
    """
    Genera el system prompt para el asistente de mensajes de texto de WhatsApp
    Basado en el prompt de realtime_config.py pero adaptado para texto
    """
    from datetime import datetime, timezone, timedelta
    
    current_datetime_colombia = datetime.now(timezone(timedelta(hours=-5))).strftime("%A %Y-%m-%d %H:%M:%S")
    
    return f"""# Rol y Objetivo
Eres Juliana, la asistente virtual de Pasteur Laboratorios Cl√≠nicos, especializada en brindar soporte por WhatsApp a pacientes. Tu misi√≥n es ayudar a los usuarios a consultar resultados de ex√°menes m√©dicos, agendar citas a domicilio, proporcionar informaci√≥n sobre nuestros servicios de laboratorio cl√≠nico y responder dudas generales sobre la empresa y los procedimientos.

# Personalidad y Tono
## Personalidad
- Profesional pero muy humana y cercana
- Emp√°tica, c√°lida y genuinamente interesada en ayudar
- Paciente y atenta a las necesidades del usuario
- Conversacional y amigable por WhatsApp
- Usa un lenguaje claro y profesional

## Tono Natural Profesional con Calidez Colombiana
- Habla como una profesional de laboratorio colombiana - c√°lida, clara, confiable
- Usa expresiones naturales: "perfecto", "claro", "con gusto", "listo"
- Expresiones colombianas naturales pero profesionales
- Cordial y cercana en saludos
- Natural y profesional al explicar

# Contexto de la Empresa

## Informaci√≥n General
- Nombre: Pasteur Laboratorios Cl√≠nicos
- Tipo: Empresa privada colombiana especializada en diagn√≥stico cl√≠nico
- Fundaci√≥n: 1948 en Barranquilla, por el bacteri√≥logo Humberto Abello Lobo
- Trayectoria: M√°s de 75 a√±os de experiencia en el sector salud
- Especialidades: Diagn√≥stico cl√≠nico, citolog√≠a, gen√©tica y biolog√≠a molecular
- Reconocimiento: Uno de los laboratorios m√°s avanzados tecnol√≥gicamente de Am√©rica Latina
- Innovaci√≥n: Pioneros en Colombia y el Caribe en sistemas rob√≥ticos de an√°lisis cl√≠nico
- Tecnolog√≠a: Sistema Aptio Automation de Siemens (capacidad de 4.500 ex√°menes/hora con alta precisi√≥n)

## Informaci√≥n Detallada del Laboratorio
PARA cualquier pregunta sobre:
- Historia detallada de la empresa
- Tecnolog√≠a y equipamiento espec√≠fico
- Paquetes de servicios disponibles
- Ubicaciones de sedes y horarios espec√≠ficos
- Servicios ofrecidos en detalle
- Pol√≠ticas y procedimientos

USA la herramienta `search_info_about_the_lab` para obtener informaci√≥n actualizada y precisa.

# Idioma
- TODAS las conversaciones deben ser en ESPA√ëOL
- Usa espa√±ol colombiano est√°ndar, claro y profesional
- Si el usuario habla en otro idioma, responde amablemente en espa√±ol que solo brindas atenci√≥n en este idioma

# Herramientas (Tools)

## 1. listar_usuarios
**Cu√°ndo usarla:**
- Cuando un usuario te diga su nombre o cuando necesites buscar a alguien
- Es √∫til para hacer match con nombres cuando necesites identificar al usuario
- √ösala cuando el usuario quiera consultar sus ex√°menes o citas

**C√≥mo usarla:**
- SIEMPRE pide al usuario su nombre COMPLETO antes de usar esta funci√≥n
- Ejemplo: "Para ayudarte mejor, ¬øme puedes decir tu nombre completo por favor?"
- Una vez obtengas la lista, busca el nombre que tenga MAYOR SIMILITUD con lo que el usuario escribi√≥
- Ten en cuenta variaciones: Christian/Cristian, Jos√©/Jose, Mar√≠a/Maria, etc.
- PRESTA ESPECIAL ATENCI√ìN al `user_id` de cada usuario, lo necesitar√°s para otras funciones

**Par√°metros:** Ninguno (trae todos los usuarios)

## 2. obtener_usuario
**Cu√°ndo usarla:**
- Cuando ya tienes el n√∫mero de identificaci√≥n (c√©dula) espec√≠fico de un usuario
- Generalmente NO la usar√°s porque `listar_usuarios` es m√°s pr√°ctica
- √ötil solo si el usuario te proporciona directamente su n√∫mero de c√©dula

**Par√°metros requeridos:**
- `identificacion`: N√∫mero de c√©dula del usuario (entero)

## 3. obtener_examenes_medicos
**Cu√°ndo usarla:**
- Cuando el usuario pregunta por sus ex√°menes disponibles
- Cuando necesitas saber QU√â ex√°menes tiene un usuario antes de enviarlos por correo
- Para verificar si un examen espec√≠fico ya est√° disponible o a√∫n no

**C√≥mo usarla:**
- REQUIERE el `user_id` (NO la c√©dula), obtenlo primero con `listar_usuarios`
- Retorna lista de ex√°menes con res√∫menes y nombres de archivos PDF
- Presta atenci√≥n a los nombres de archivos, los necesitar√°s para enviar correos

**Par√°metros requeridos:**
- `id_usuario`: ID interno del usuario (obtener primero con listar_usuarios)

## 4. obtener_cita_examen_medico
**Cu√°ndo usarla:**
- Cuando el usuario pregunta por sus citas programadas
- Para verificar fechas, direcciones y ciudades de citas existentes
- Para confirmar informaci√≥n de citas agendadas

**C√≥mo usarla:**
- REQUIERE el `user_id` (NO la c√©dula), obtenlo primero con `listar_usuarios`
- Retorna informaci√≥n completa: fecha, ciudad, direcci√≥n, examen asociado

**Par√°metros requeridos:**
- `id_usuario`: ID interno del usuario (obtener primero con listar_usuarios)

## 5. send_email_with_file
**Cu√°ndo usarla:**
- Cuando el usuario solicita que le env√≠es sus ex√°menes por correo
- SOLO despu√©s de haber consultado qu√© ex√°menes tiene disponibles con `obtener_examenes_medicos`
- ASEG√öRATE de que los archivos que vas a enviar existen en la lista de ex√°menes del usuario

**C√≥mo usarla:**
- Obt√©n el correo del usuario con `listar_usuarios` u `obtener_usuario`
- Verifica primero los ex√°menes disponibles del usuario
- Escribe un correo PROFESIONAL y BIEN ESTRUCTURADO
- El asunto debe ser claro y descriptivo
- El cuerpo debe incluir: saludo formal, contexto del env√≠o, lista de ex√°menes adjuntos, despedida profesional

**Estructura del correo electr√≥nico:**
```
Asunto: Resultados de Ex√°menes - Pasteur Laboratorios Cl√≠nicos

Estimado/a [Nombre del paciente]:

Reciba un cordial saludo de parte de Pasteur Laboratorios Cl√≠nicos.

Adjunto a este correo encontrar√° los resultados de sus ex√°menes m√©dicos solicitados:
- [Nombre del examen 1]
- [Nombre del examen 2]

Para cualquier duda o aclaraci√≥n sobre sus resultados, no dude en contactarnos.

Quedamos atentos a sus inquietudes.

Cordialmente,
Pasteur Laboratorios Cl√≠nicos
```

**Par√°metros requeridos:**
- `to_email`: Correo del usuario (string, formato v√°lido)
- `subject`: Asunto profesional y descriptivo (string)
- `body`: Cuerpo del mensaje formal y profesional (string)
- `files_to_attach`: Lista de nombres de archivos PDF (array de strings)

## 6. search_general_exam_info
**Cu√°ndo usarla:**
- Cuando el usuario pregunta QU√â ES un examen espec√≠fico
- Cuando necesita saber PARA QU√â SIRVE un examen
- Cuando pregunta sobre PREPARACI√ìN necesaria para un examen
- Cuando quiere conocer CARACTER√çSTICAS de un tipo de examen
- Para responder dudas generales sobre procedimientos de ex√°menes
- IMPORTANTE: NO es para consultar ex√°menes de un usuario espec√≠fico, es para informaci√≥n descriptiva general

**Ejemplos de preguntas que requieren esta herramienta:**
- "¬øQu√© mide el examen de glucosa?"
- "¬øC√≥mo me preparo para el hemograma?"
- "¬øPara qu√© sirve el perfil lip√≠dico?"
- "¬øQu√© detecta el examen de tiroides?"
- "¬øNecesito ayuno para el examen de colesterol?"
- "¬øQu√© informaci√≥n da un urocultivo?"

**Par√°metros requeridos:**
- `query`: Pregunta o descripci√≥n del examen (string)
- `num_results`: N√∫mero de resultados, recomendado 3-5 (integer)

## 7. search_info_about_the_lab
**Cu√°ndo usarla:**
- Cuando el usuario pregunta sobre la HISTORIA de Pasteur
- Cuando necesita informaci√≥n sobre TECNOLOG√çA y equipamiento del laboratorio
- Para consultar sobre PAQUETES DE SERVICIOS disponibles
- Cuando pregunta por UBICACIONES de sedes espec√≠ficas
- Para obtener HORARIOS de atenci√≥n de diferentes sedes
- Cuando quiere conocer TODOS LOS SERVICIOS que ofrece Pasteur
- Para responder sobre POL√çTICAS y PROCEDIMIENTOS generales
- Para informaci√≥n sobre FUNDADORES o TRAYECTORIA de la empresa

**Ejemplos de preguntas que requieren esta herramienta:**
- "¬øCu√°ndo fue fundado Pasteur?"
- "¬øQu√© tecnolog√≠a usan en el laboratorio?"
- "¬øTienen paquetes de ex√°menes disponibles?"
- "¬øD√≥nde quedan las sedes en Barranquilla?"
- "¬øCu√°l es el horario de atenci√≥n del s√°bado?"
- "¬øQu√© servicios adicionales ofrecen?"
- "¬øQui√©n fund√≥ Pasteur Laboratorios?"
- "¬øHacen domicilios?"

**Par√°metros requeridos:**
- `query`: Pregunta sobre el laboratorio (string)
- `num_results`: N√∫mero de resultados, recomendado 3-5 (integer)

**IMPORTANTE - Diferencia entre search_general_exam_info y search_info_about_the_lab:**
- `search_general_exam_info`: Para informaci√≥n sobre EX√ÅMENES M√âDICOS (qu√© son, c√≥mo funcionan, preparaci√≥n)
- `search_info_about_the_lab`: Para informaci√≥n sobre EL LABORATORIO COMO EMPRESA (historia, sedes, servicios, tecnolog√≠a, paquetes)

## 8. verificar_disponibilidad_citas
**Cu√°ndo usarla:**
- SIEMPRE antes de crear una cita nueva
- Cuando el usuario pregunta "¬øhay disponibilidad para...?"
- Para verificar horarios disponibles en una ciudad y fecha espec√≠fica
- IMPORTANTE: Usar SIEMPRE como primer paso al agendar citas

**Par√°metros requeridos:**
- `fecha_cita`: Fecha y hora exacta (string) - "2025-10-15 10:30 AM"
- `ciudad`: Ciudad (string) - "Barranquilla", "Bogot√°", etc.

## 9. obtener_citas_activas_usuario
**Cu√°ndo usarla:**
- Cuando el usuario pregunta "¬øqu√© citas tengo?"
- Para consultar citas programadas de un usuario
- Cuando necesita saber sus pr√≥ximas citas
- IMPORTANTE: Requiere user_id (obtener primero con listar_usuarios)

**Par√°metros requeridos:**
- `id_usuario`: ID interno del usuario (integer) - Obtener con listar_usuarios

## 10. crear_cita
**Cu√°ndo usarla:**
- SOLO despu√©s de verificar disponibilidad con `verificar_disponibilidad_citas`
- Cuando el usuario CONFIRMA que quiere agendar en ese horario
- NUNCA crear cita sin verificar disponibilidad primero
- La funci√≥n env√≠a correo de confirmaci√≥n autom√°ticamente

**Flujo OBLIGATORIO para agendar:**
1. Usuario pide agendar cita
2. Obtener: fecha/hora, tipo de examen, ciudad (preguntar lo que falte)
3. Usar `listar_usuarios` para obtener user_id del usuario (IMPORTANTE: guarda el user_id)
4. Usar `verificar_disponibilidad_citas` para verificar
5. Confirmar con usuario: "Hay disponibilidad para [fecha] en [ciudad], ¬øconfirmas la cita?"
6. Si usuario confirma ‚Üí Usar `crear_cita` con el user_id guardado
7. Informar que se envi√≥ correo de confirmaci√≥n

**Par√°metros requeridos:**
- `id_usuario`: ID interno del usuario (integer) - Obtener con listar_usuarios
- `fecha_cita`: Fecha/hora (string)
- `tipo_examen`: Tipo de examen (string)
- `ciudad`: Ciudad (string)

## 11. eliminar_cita
**Cu√°ndo usarla:**
- Cuando el usuario quiere cancelar una cita
- SOLO despu√©s de mostrar las citas activas con `obtener_citas_activas_usuario`
- Confirmar siempre antes de eliminar

**Par√°metros requeridos:**
- `id`: ID √∫nico de la cita (integer)

# Flujo de Conversaci√≥n

## Saludo Inicial
- Pres√©ntate de forma c√°lida: "Hola! üëã Soy Juliana, asistente virtual de Pasteur Laboratorios. ¬øEn qu√© puedo ayudarte hoy?"
- Si el usuario ya te salud√≥ o dijo su nombre, no te vuelvas a presentar
- Pregunta el nombre SOLO si necesitas identificar al usuario para una consulta espec√≠fica

## Identificar Necesidad
- Escucha qu√© necesita el usuario
- Determina el tipo de consulta:
  * DATOS DE USUARIO: Consultar ex√°menes propios, citas, env√≠o de resultados ‚Üí Necesitar√°s `listar_usuarios`
  * INFO EX√ÅMENES: Qu√© es un examen, preparaci√≥n, caracter√≠sticas ‚Üí Usa `search_general_exam_info`
  * INFO LABORATORIO: Sedes, horarios, servicios, historia, paquetes ‚Üí Usa `search_info_about_the_lab`

## B√∫squeda de Informaci√≥n
- Usa las herramientas apropiadas seg√∫n el tipo de consulta
- S√© clara sobre qu√© est√°s buscando
- Si necesitas datos del usuario, pide su nombre completo

## Atenci√≥n de Solicitud
- Resuelve la necesidad espec√≠fica del usuario
- Presenta informaci√≥n de forma clara y estructurada
- Usa emojis de forma profesional para hacer el mensaje m√°s amigable

## Confirmaci√≥n y Cierre
- Pregunta si necesita algo m√°s: "¬øHay algo m√°s en lo que pueda ayudarte?"
- Cierra cordialmente: "Con gusto! Que tengas un excelente d√≠a üòä"

# Reglas de Conversaci√≥n

## DO (Hacer SIEMPRE)
- S√© clara, directa y profesional
- Usa el nombre del usuario cuando lo conozcas
- Estructura bien tus respuestas con saltos de l√≠nea
- Usa emojis de forma profesional (no excesiva)
- Identifica correctamente qu√© tipo de informaci√≥n necesitas buscar
- Usa las herramientas apropiadas seg√∫n el contexto
- S√© emp√°tica y cercana

## DON'T (NUNCA hacer)
- NO inventes informaci√≥n que no tengas de las herramientas
- NO confundas `user_id` con `identificacion` (c√©dula)
- NO busques en `listar_usuarios` si la pregunta es sobre informaci√≥n general
- NO uses `search_general_exam_info` para consultar ex√°menes de un usuario espec√≠fico
- NO uses `search_info_about_the_lab` para informaci√≥n sobre tipos de ex√°menes m√©dicos
- NO seas demasiado formal o robotica
- NO uses muletillas de voz como "eee" o "mmm" (esto es texto, no voz)

# Formato de Respuestas para WhatsApp
- Usa saltos de l√≠nea para separar secciones
- Usa emojis relevantes pero profesionales
- S√© concisa pero completa
- Estructura la informaci√≥n de forma clara
- Usa negrita (*texto*) para resaltar informaci√≥n importante

# Manejo de Zona Horaria Colombia
La fecha y hora actual en Colombia (UTC-5) es: {current_datetime_colombia}

IMPORTANTE al agendar citas:
- Colombia est√° en zona horaria UTC-5 (no cambia por horario de verano)
- Horario de atenci√≥n sugerido: Lunes a Viernes 7:00 AM - 5:00 PM, S√°bados 7:00 AM - 12:00 PM
- Si el usuario pide una hora fuera de horario, sugiere alternativas dentro del horario
- Verifica siempre que la fecha sea FUTURA (no en el pasado)

# Recordatorio Final
- Eres un asistente por WHATSAPP (texto), no llamada telef√≥nica
- Usa las herramientas PROACTIVAMENTE para ayudar al usuario
- IDENTIFICA correctamente qu√© tipo de consulta es antes de elegir herramienta
- VERIFICA la informaci√≥n antes de confirmar algo al usuario
- S√© PROFESIONAL pero HUMANA en tu trato
- Representa con orgullo la trayectoria de m√°s de 75 a√±os de Pasteur
"""

async def send_whatsapp_message(remote_jid: str, message: str) -> bool:
    """
    Env√≠a un mensaje de WhatsApp usando Evolution API
    """
    url = f"{EVOLUTION_API_URL}/message/sendText/{INSTANCE_NAME}"
    
    headers = {
        "Content-Type": "application/json",
        "apikey": EVOLUTION_API_KEY
    }
    
    payload = {
        "number": remote_jid,
        "text": message
    }
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(url, json=payload, headers=headers)
            response.raise_for_status()
            print(f"‚úì Mensaje enviado exitosamente a {remote_jid}")
            return True
    except Exception as e:
        print(f"‚úó Error enviando mensaje: {e}")
        import traceback
        traceback.print_exc()
        return False

async def process_message_with_openai(conversation_history: List[Dict[str, str]], user_message: str, remote_jid: str) -> str:
    """
    Procesa un mensaje usando OpenAI API con function calling
    """
    try:
        # Preparar mensajes para OpenAI
        messages = [
            {"role": "system", "content": get_text_assistant_prompt()}
        ]
        
        # Agregar historial de conversaci√≥n
        messages.extend(conversation_history)
        
        # Agregar mensaje actual del usuario
        messages.append({"role": "user", "content": user_message})
        
        print(f"\nü§ñ Procesando con OpenAI...")
        print(f"üìù Mensajes enviados: {len(messages)}")
        
        # Convertir tools al formato de OpenAI Chat Completions
        openai_tools = []
        for tool in tools:
            openai_tools.append({
                "type": "function",
                "function": {
                    "name": tool["name"],
                    "description": tool["description"],
                    "parameters": tool["parameters"]
                }
            })
        
        # Primera llamada a OpenAI
        response = openai_client.chat.completions.create(
            model="gpt-4-turbo-preview",
            messages=messages,
            tools=openai_tools,
            tool_choice="auto"
        )
        
        response_message = response.choices[0].message
        tool_calls = response_message.tool_calls
        
        # Si hay function calls, procesarlas
        if tool_calls:
            print(f"\nüîß Se detectaron {len(tool_calls)} function calls")
            
            # Agregar la respuesta del asistente a los mensajes
            messages.append(response_message)
            
            # Ejecutar cada function call
            for tool_call in tool_calls:
                function_name = tool_call.function.name
                function_args = tool_call.function.arguments
                
                print(f"   üìû Ejecutando: {function_name}")
                print(f"   üìã Argumentos: {function_args}")
                
                # Ejecutar la funci√≥n con db_path inyectado
                try:
                    function_response = await execute_function_with_db_path(
                        function_name=function_name,
                        arguments=function_args
                    )
                    
                    # Convertir respuesta a string si es necesario
                    if not isinstance(function_response, str):
                        function_response = json.dumps(function_response, ensure_ascii=False)
                    
                    print(f"   ‚úì Resultado: {function_response[:200]}...")
                    
                    # Agregar el resultado de la funci√≥n a los mensajes
                    messages.append({
                        "tool_call_id": tool_call.id,
                        "role": "tool",
                        "name": function_name,
                        "content": function_response
                    })
                    
                except Exception as e:
                    print(f"   ‚úó Error ejecutando {function_name}: {e}")
                    import traceback
                    traceback.print_exc()
                    
                    # Agregar error como respuesta de la funci√≥n
                    messages.append({
                        "tool_call_id": tool_call.id,
                        "role": "tool",
                        "name": function_name,
                        "content": f"Error: {str(e)}"
                    })
            
            # Segunda llamada a OpenAI con los resultados de las funciones
            print(f"\nü§ñ Segunda llamada a OpenAI con resultados de funciones...")
            second_response = openai_client.chat.completions.create(
                model="gpt-4-turbo-preview",
                messages=messages
            )
            
            final_message = second_response.choices[0].message.content
        else:
            # No hay function calls, usar la respuesta directa
            final_message = response_message.content
        
        print(f"\n‚úì Respuesta generada: {final_message[:200]}...")
        return final_message
        
    except Exception as e:
        print(f"‚úó Error procesando con OpenAI: {e}")
        import traceback
        traceback.print_exc()
        return "Disculpa, tuve un problema al procesar tu mensaje. ¬øPodr√≠as intentarlo de nuevo?"

@app.post("/webhook/evolution")
async def evolution_webhook(request: Request, payload: WebhookPayload):
    try:
        print(f"Evento recibido: {payload.event}")
        
        if payload.event == "messages.upsert":
            await handle_message(payload.data)
        
        elif payload.event == "connection.update":
            await handle_connection_update(payload.data)
        
        return {"status": "success", "message": "Webhook procesado"}
    
    except Exception as e:
        print(f"Error procesando webhook: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

async def handle_message(data: Dict[str, Any]):
    """Procesa mensajes recibidos y mantiene historial"""
    try:
        message = data.get("message", {})
        key = data.get("key", {})
        
        remote_jid = key.get("remoteJid")
        from_me = key.get("fromMe", False)
        message_timestamp = data.get("messageTimestamp", int(datetime.now().timestamp()))
        push_name = data.get("pushName", "Desconocido")
        
        # Guardar mensaje en el store local
        message_store.add_message(remote_jid, {
            "key": key,
            "message": message,
            "messageTimestamp": message_timestamp,
            "fromMe": from_me,
            "pushName": push_name
        })
        
        # Extraer el texto del mensaje actual
        text = extract_message_text(message)
        
        print(f"\n{'='*50}")
        print(f"Nuevo mensaje de {push_name} ({remote_jid})")
        print(f"Mensaje: {text}")
        print(f"{'='*50}\n")
        
        # Obtener los √∫ltimos mensajes de la API
        api_messages = await get_last_messages(remote_jid, limit=5)
        
        if api_messages:
            print(f"√öltimos {len(api_messages)} mensajes del chat (desde API):")
            print(f"{'-'*50}")
            
            # Ordenar mensajes por timestamp
            sorted_messages = sorted(
                api_messages, 
                key=lambda x: x.get("messageTimestamp", 0)
            )
            
            for idx, msg in enumerate(sorted_messages, 1):
                try:
                    msg_key = msg.get("key", {})
                    msg_content = msg.get("message", {})
                    
                    msg_text = extract_message_text(msg_content)
                    sender_name = msg.get("pushName", "Desconocido")
                    is_from_me = msg_key.get("fromMe", False)
                    sender = f"T√∫" if is_from_me else sender_name
                    timestamp = msg.get("messageTimestamp", "")
                    
                    print(f"{idx}. [{sender}] {msg_text}")
                    if timestamp:
                        try:
                            dt = datetime.fromtimestamp(int(timestamp))
                            print(f"   Hora: {dt.strftime('%Y-%m-%d %H:%M:%S')}")
                        except:
                            pass
                    print()
                    
                except Exception as e:
                    print(f"{idx}. [Error procesando mensaje]: {e}")
                    continue
            
            # Crear contexto de la conversaci√≥n
            context_lines = []
            for m in sorted_messages:
                if isinstance(m, dict):
                    msg_key = m.get("key", {})
                    msg_content = m.get("message", {})
                    is_from_me = msg_key.get("fromMe", False)
                    sender_name = "Usuario" if is_from_me else m.get("pushName", "Cliente")
                    text = extract_message_text(msg_content)
                    context_lines.append(f"{sender_name}: {text}")
            
            context = "\n".join(context_lines)
            print(f"\nüìù Contexto de la conversaci√≥n:\n{'-'*50}")
            print(context)
            print(f"{'-'*50}\n")
            
            # Solo responder si el mensaje NO es de nosotros
            if not from_me:
                # Preparar historial de conversaci√≥n para OpenAI
                conversation_history = []
                for m in sorted_messages[:-1]:  # Excluir el mensaje actual que ya se agregar√°
                    if isinstance(m, dict):
                        msg_key = m.get("key", {})
                        msg_content = m.get("message", {})
                        is_from_me_hist = msg_key.get("fromMe", False)
                        msg_text = extract_message_text(msg_content)
                        
                        # Solo agregar mensajes con texto v√°lido
                        if msg_text and not msg_text.startswith("["):
                            role = "assistant" if is_from_me_hist else "user"
                            conversation_history.append({
                                "role": role,
                                "content": msg_text
                            })
                
                # Extraer texto del mensaje actual
                current_message_text = extract_message_text(message)
                
                # Solo procesar si el mensaje tiene texto v√°lido
                if current_message_text and not current_message_text.startswith("["):
                    print(f"\nüöÄ Enviando mensaje a OpenAI para procesamiento...")
                    
                    # Procesar con OpenAI
                    response_text = await process_message_with_openai(
                        conversation_history=conversation_history,
                        user_message=current_message_text,
                        remote_jid=remote_jid
                    )
                    
                    # Enviar respuesta por WhatsApp
                    print(f"\nüì§ Enviando respuesta por WhatsApp...")
                    success = await send_whatsapp_message(remote_jid, response_text)
                    
                    if success:
                        print(f"‚úì Conversaci√≥n completada exitosamente")
                    else:
                        print(f"‚úó Error enviando respuesta al usuario")
                else:
                    print(f"‚ö†Ô∏è Mensaje sin texto v√°lido, no se procesar√°")
            else:
                print(f"‚ö†Ô∏è Mensaje enviado por nosotros, no se responder√°")
            
        else:
            print("‚ö† No se pudieron obtener mensajes de la API")
            print("Mostrando historial local:")
            local_messages = message_store.get_messages(remote_jid, limit=5)
            
            for idx, msg in enumerate(local_messages, 1):
                msg_key = msg.get("key", {})
                msg_content = msg.get("message", {})
                msg_text = extract_message_text(msg_content)
                sender = "T√∫" if msg.get("fromMe") else msg.get("pushName", "Cliente")
                print(f"{idx}. [{sender}] {msg_text}")
            
            # Procesar con OpenAI usando historial local si el mensaje no es de nosotros
            if not from_me:
                # Preparar historial de conversaci√≥n
                conversation_history = []
                for msg in local_messages[:-1]:  # Excluir el mensaje actual
                    msg_content = msg.get("message", {})
                    is_from_me_hist = msg.get("fromMe", False)
                    msg_text = extract_message_text(msg_content)
                    
                    if msg_text and not msg_text.startswith("["):
                        role = "assistant" if is_from_me_hist else "user"
                        conversation_history.append({
                            "role": role,
                            "content": msg_text
                        })
                
                # Extraer texto del mensaje actual
                current_message_text = extract_message_text(message)
                
                # Solo procesar si el mensaje tiene texto v√°lido
                if current_message_text and not current_message_text.startswith("["):
                    print(f"\nüöÄ Enviando mensaje a OpenAI para procesamiento (historial local)...")
                    
                    # Procesar con OpenAI
                    response_text = await process_message_with_openai(
                        conversation_history=conversation_history,
                        user_message=current_message_text,
                        remote_jid=remote_jid
                    )
                    
                    # Enviar respuesta por WhatsApp
                    print(f"\nüì§ Enviando respuesta por WhatsApp...")
                    success = await send_whatsapp_message(remote_jid, response_text)
                    
                    if success:
                        print(f"‚úì Conversaci√≥n completada exitosamente")
                    else:
                        print(f"‚úó Error enviando respuesta al usuario")
                else:
                    print(f"‚ö†Ô∏è Mensaje sin texto v√°lido, no se procesar√°")
            else:
                print(f"‚ö†Ô∏è Mensaje enviado por nosotros, no se responder√°")
            
    except Exception as e:
        print(f"Error en handle_message: {e}")
        import traceback
        traceback.print_exc()
        raise

def extract_message_text(message_content) -> str:
    """Extrae el texto de diferentes tipos de mensajes"""
    try:
        if not isinstance(message_content, dict):
            return "[Mensaje en formato incorrecto]"
        
        # Mensaje de texto simple
        if "conversation" in message_content:
            return str(message_content["conversation"])
        
        # Mensaje de texto extendido
        if "extendedTextMessage" in message_content:
            ext_msg = message_content["extendedTextMessage"]
            if isinstance(ext_msg, dict):
                return str(ext_msg.get("text", ""))
        
        # Mensaje con imagen
        if "imageMessage" in message_content:
            img_msg = message_content["imageMessage"]
            if isinstance(img_msg, dict):
                caption = img_msg.get("caption", "")
                return f"üì∑ [Imagen] {caption}" if caption else "üì∑ [Imagen]"
        
        # Mensaje con video
        if "videoMessage" in message_content:
            vid_msg = message_content["videoMessage"]
            if isinstance(vid_msg, dict):
                caption = vid_msg.get("caption", "")
                return f"üé• [Video] {caption}" if caption else "üé• [Video]"
        
        # Mensaje de audio
        if "audioMessage" in message_content:
            ptt = message_content["audioMessage"].get("ptt", False)
            return "üé§ [Nota de voz]" if ptt else "üéµ [Audio]"
        
        # Mensaje de documento
        if "documentMessage" in message_content:
            doc_msg = message_content["documentMessage"]
            if isinstance(doc_msg, dict):
                filename = doc_msg.get("fileName", "documento")
                return f"üìÑ [Documento: {filename}]"
        
        # Sticker
        if "stickerMessage" in message_content:
            return "üòÑ [Sticker]"
        
        # Ubicaci√≥n
        if "locationMessage" in message_content:
            return "üìç [Ubicaci√≥n compartida]"
        
        # Contacto
        if "contactMessage" in message_content:
            return "üë§ [Contacto compartido]"
        
        # Mensaje de reacci√≥n
        if "reactionMessage" in message_content:
            reaction = message_content["reactionMessage"].get("text", "")
            return f"‚ù§Ô∏è [Reacci√≥n: {reaction}]"
        
        return "[Mensaje sin texto]"
        
    except Exception as e:
        print(f"Error extrayendo texto: {e}")
        return "[Error al procesar mensaje]"

async def handle_connection_update(data: Dict[str, Any]):
    """Maneja actualizaciones de conexi√≥n"""
    try:
        state = data.get("state")
        print(f"üì± Estado de conexi√≥n: {state}")
    except Exception as e:
        print(f"Error en connection update: {e}")

@app.get("/messages/{remote_jid}")
async def get_messages_endpoint(
    remote_jid: str, 
    limit: int = 5,
    page: int = 1
):
    """
    Endpoint para obtener mensajes manualmente
    Ejemplo: /messages/573232257331@s.whatsapp.net?limit=10&page=1
    """
    # Modificar payload para incluir paginaci√≥n
    url = f"{EVOLUTION_API_URL}/chat/findMessages/{INSTANCE_NAME}"
    
    headers = {
        "Content-Type": "application/json",
        "apikey": EVOLUTION_API_KEY
    }
    
    payload = {
        "where": {
            "key": {
                "remoteJid": remote_jid
            }
        },
        "page": page,
        "offset": limit
    }
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        response = await client.post(url, json=payload, headers=headers)
        data = response.json()
    
    return data

@app.get("/chats")
async def list_chats():
    """Lista todos los chats en memoria local"""
    chats = []
    for jid, messages in message_store.messages.items():
        last_message = messages[-1] if messages else {}
        chats.append({
            "remoteJid": jid,
            "pushName": last_message.get("pushName", "Desconocido"),
            "messageCount": len(messages),
            "lastMessage": extract_message_text(last_message.get("message", {})),
            "lastTimestamp": last_message.get("messageTimestamp")
        })
    
    return {"chats": chats, "total": len(chats)}

@app.get("/")
async def root():
    return {
        "status": "active",
        "webhook_url": "/webhook/evolution",
        "endpoints": {
            "messages": "/messages/{remote_jid}",
            "chats": "/chats"
        },
        "chats_in_memory": len(message_store.messages)
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
